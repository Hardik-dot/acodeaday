class Solution {
    HashSet<String> hs = new HashSet<>();
    private int[] preproc(char[] t){
        HashMap<Character, Integer> hm = new HashMap<>();
        for(char c:t)
            hm.put(c,hm.getOrDefault(c,0)+1);
        int[] arr = new int[hm.size()];
        int i=0;
        for(Map.Entry<Character, Integer> e:hm.entrySet()){
            arr[i++]=(int)e.getValue();
            
        }
        return arr; 
    }
    
    private void dfs(int tot, int[] pre, int ind, StringBuilder sb){
        if(tot==0) {
            hs.add(sb.toString());
            return;
        }
        
        for(int i=ind;i<pre.length;i++){
            if(pre[i]!=0){
                sb.append(i);
                pre[i]--;
                dfs(tot-1,pre,ind,sb);
                pre[i]++;
                sb.setLength(sb.length()-1);
            }
        }
        return;
    }
    
    public int numTilePossibilities(String tiles) {
        int[] pre = preproc(tiles.toCharArray());
        
        for(int i=2;i<=tiles.length();i++){
            for(int j=0;j<pre.length;j++){
                dfs(i,pre,j,new StringBuilder());
            }
        }
        
        return hs.size()+pre.length;
    }
}
