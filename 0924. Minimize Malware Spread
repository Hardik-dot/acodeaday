class Solution {
    class UF{
        int[] parent, size;
        UF(int n){
            parent=new int[n];
            size=new int[n];
            for(int i=0;i<n;i++){
                parent[i]=i;
                size[i]=1;
            }
        }
        
        private int find(int x){
            if(x==parent[x])
                return x;
            return parent[x]=find(parent[x]);
        }
        
        protected void union(int a, int b){
            int pa=find(a),pb=find(b);
            if(pa!=pb){
                parent[pa]=pb;
                size[pb]+=size[pa];
            }
        }
    }
    public int minMalwareSpread(int[][] ic, int[] initial) {
        UF uf = new UF(ic.length);
        for(int i=0;i<ic.length;i++){
            for(int j=i+1;j<ic.length;j++){
                if(ic[i][j]==1)
                    uf.union(i,j);
            }
        }
        
        int[] count = new int[ic.length];
        for(int n:initial)
            count[uf.find(n)]++;
        int ans=-1,asz=-1;
        for(int n:initial){
            int root=uf.find(n);
            if(count[root]==1){
                if(uf.size[root]>asz){
                    ans=n;
                    asz=uf.size[root];
                }else if(uf.size[root]==asz&&n<ans){
                    ans=n;
                }
            }
        }
        if (ans == -1) {
            ans = Integer.MAX_VALUE;
            for (int node: initial)
                ans = Math.min(ans, node);
        }

        return ans;
        
    }
}
