class Solution {
    private Map<Character, Integer> init(char[] p){
        Map<Character, Integer> hm = new HashMap<>();
        for(int i=0;i<p.length;i++){
            hm.put(p[i],hm.getOrDefault(p[i],0)+1);
        }
        return hm;
    }
    
    
    public List<Integer> findAnagrams(String sa, String pa) {
        char[] s = sa.toCharArray(), p = pa.toCharArray();
        
        List<Integer> al = new ArrayList<>();
        Map<Character, Integer> hm = init(p);
        Map<Character, Integer> cur = new HashMap<>();
        int len=0;
        
        for(int i=s.length-1;i>=0;i--){
            if(!hm.containsKey(s[i])){//reset
                cur = new HashMap<>();
                len=0;
            }
            else{
                cur.put(s[i],cur.getOrDefault(s[i],0)+1);
                len++;
                if(len>pa.length()){
                    cur.put(s[i+len-1],cur.getOrDefault(s[i+len-1],0)-1);
                    if(cur.get(s[i+len-1])==0)
                        cur.remove(s[i+len-1]);
                    len--;
                }
                if(len==pa.length()&&hm.equals(cur)){
                    al.add(0,i);
                }    
            }
        }

        return al;
    }
}
