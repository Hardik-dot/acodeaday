/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashSet<String> dupli = new HashSet<>();
    HashSet<String> fina = new HashSet<>();
    List<TreeNode> tree = new ArrayList<>();
    public String aux(TreeNode root) {
        if(root==null) return "#";
        
        String serial = root.val+","+aux(root.left)+","+aux(root.right);
        
        if(dupli.contains(serial)&&!fina.contains(serial)){
            fina.add(serial);tree.add(root);
        }else
        dupli.add(serial);
        return serial;
    }
    
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        
        aux(root);
        List<TreeNode> x = tree;
        return tree;
    }
}
