class Solution {
    Integer[] dp;
    HashSet<Integer> hs = new HashSet<>();
    public int dfs(int[][] graph, int id){
        if(graph[id].length==0) {
            dp[id]=1;
            return 1;
        }
        if(dp[id]==null){
            hs.add(id);
            int points[]=graph[id];
            int fl=1;
            for(int i=0;i<points.length;i++){
                if(hs.contains(points[i])||dfs(graph,points[i])==0) {
                    fl=0;break;
                }
            }
            dp[id]=fl;
            hs.remove(id);
        }
        return dp[id];
    }
    
    public List<Integer> eventualSafeNodes(int[][] graph) {
        dp = new Integer[graph.length];
        for(int i=0;i<graph.length;i++)
            dfs(graph,i);
        
        ArrayList<Integer> al = new ArrayList<>();
        for(int i=0;i<dp.length;i++)
            if(dp[i]!=null&&dp[i]==1) al.add(i);
        return al;
    }
}
