class Solution {
    HashMap<String, Integer> hm = new HashMap<>();
    private List<List<String>> groupByLength(String[] words){
        List<List<String>> groups = new ArrayList<>();
        for(String w:words){
            while(groups.size()<=w.length())
                groups.add(new ArrayList<>());
            groups.get(w.length()).add(w);
        }
        return groups;
    }
    
    private boolean pred(String small, String big) {
        int off=0,i=0;
        for(;i<small.length()&&off<=1;i++){
            if(small.charAt(i)!=big.charAt(i+off)){
                off++;i--;}
        }
        return i==small.length();
    }
    
    private int dfs(List<List<String>> groups, String curr){
        if(!hm.containsKey(curr)){
            int ans=0;
            if(curr.length()<groups.size()){
                for(String s:groups.get(curr.length()+1)){
                    if(pred(curr,s))
                        ans=Math.max(ans,dfs(groups,s));
                }
            }
            hm.put(curr,ans+1);
        }
        return hm.get(curr);
    }
    
    public int longestStrChain(String[] words) {
        List<List<String>> groups = groupByLength(words);
        groups.add(new ArrayList<>());
        int ans=0;
        for(String s:words)
            ans=Math.max(ans,dfs(groups,s));
        return ans;
    }
}
