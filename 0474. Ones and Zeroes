class Solution {
    int[][] enc;
    Integer[][][] dp;
    private int aux(int ind, int one, int zero){
        if(ind==enc.length) return 0;
        if(dp[ind][zero][one]==null){
            int keep=-1;
            if(zero-enc[ind][0]>=0&&one-enc[ind][1]>=0)
                keep=aux(ind+1,one-enc[ind][1],zero-enc[ind][0])+1;
            int avoid = aux(ind+1,one,zero);
            dp[ind][zero][one]=Math.max(keep,avoid);
        }
        return dp[ind][zero][one];
    }
    public int findMaxForm(String[] strs, int m, int n) {
        enc=new int[strs.length][2];
        dp = new Integer[strs.length][m+1][n+1];
        for(int i=0;i<strs.length;i++){
            for(char c:strs[i].toCharArray()){
                enc[i][c-'0']++;
            }
        }
        
        int[][] store = new int[m+1][n+1];
        for(int k=0;k<strs.length;k++){
            for(int i=m;i>=enc[k][0];i--){
                for(int j=n;j>=enc[k][1];j--){
                    store[i][j]=Math.max(store[i-enc[k][0]][j-enc[k][1]]+1,store[i][j]);
                }
            }
        }
        return store[m][n];
        //return aux(0,n,m);
    }
}
