class Solution {
    public List<Integer> minAvailableDurationSORT(int[][] slots1, int[][] slots2, int duration) {
        Arrays.sort(slots1,(x,y)->x[1]-y[1]);
        Arrays.sort(slots2,(x,y)->x[1]-y[1]);
        List<Integer> res=new ArrayList<>();
        int i=0,j=0;
        while(i<slots1.length&&j<slots2.length){
            int a = Math.max(slots1[i][0],slots2[j][0]);
            int b = Math.min(slots1[i][1],slots2[j][1]);
            if(a<b&&b-a>=duration){
                res.add(a);
                res.add(a+duration);
                break;
            }
            if(slots1[i][1]>slots2[j][1])
                j++;
            else i++;
        }
        
        return res;
    }
    public List<Integer> minAvailableDuration(int[][] slots1, int[][] slots2, int duration) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((x,y)->x[0]-y[0]);
        for(int[] s:slots1)
            if(s[1]-s[0]>=duration)
                pq.add(s);
        for(int[] s:slots2)
            if(s[1]-s[0]>=duration)
                pq.add(s);
        while(pq.size()>1){
            int[] s1=pq.poll();
            int[] s2=pq.peek();
            if(s1[1]-s2[0]>=duration)
                return new ArrayList<Integer>(Arrays.asList(s2[0], s2[0] + duration));
        }
        return new ArrayList<Integer>();
    }
}
