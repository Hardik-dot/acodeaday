/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        Node level=root;
        while(level!=null){
            Node curr=level;
            while(curr!=null){
                if(curr.left!=null) curr.left.next=curr.right;
                if(curr.right!=null&&curr.next!=null) curr.right.next=curr.next.left;
                curr=curr.next;
            }
            level=level.left;
        }
        return root;
    }
    
    public Node connectSpace(Node root) {
        if(root==null) return root;
        Queue<Node> q = new LinkedList<>();
        Node curr=root,prev=null;
        q.add(root);q.add(null);
        while(!q.isEmpty()){
            curr=q.poll();
            if(curr==null){
                if(q.isEmpty()) break;
                prev=null;q.add(null);
                continue;
            }
            curr.next=q.peek();
            if(curr.left!=null) q.add(curr.left);
            if(curr.right!=null) q.add(curr.right);
        }
        return root;
    }
}
