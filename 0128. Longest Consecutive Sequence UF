class Solution {
    
    class UF{
        int[] parent;
        int[] size;
        UF(int n){
            parent = new int[n];
            size = new int[n];
            for(int i=0;i<n;i++){
                parent[i]=i;
                size[i]=1;
            }
        }
        
        private int find(int i){
            if(parent[i]==i)
                return i;
            return parent[i]=find(parent[i]);
        }
        
        protected void union(int a, int b){
            int pa=find(a);
            int pb=find(b);
            if(pa!=pb){
                parent[pa]=pb;
                size[pb] += size[pa];
            }
        }

        public int getLargetComponentSize() {
            int maxSize = 0;
            for (int i = 0; i < parent.length; i++) {
                if (parent[i] == i && size[i] > maxSize) {
                    maxSize = size[i];
                }
            }
            
            return maxSize;
        }
    }
    
    public int longestConsecutive(int[] nums) {
        UF uf = new UF(nums.length);
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(hm.containsKey(nums[i])) continue;
            if(hm.containsKey(nums[i]-1))
                uf.union(i,hm.get(nums[i]-1));
            if(hm.containsKey(nums[i]+1))
                uf.union(i,hm.get(nums[i]+1));
            hm.put(nums[i],i);
        }
        return uf.getLargetComponentSize();
    }
}
