class Solution {
    public int maximumMinimumPath(int[][] grid) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((x,y)->y[2]-x[2]);
        pq.offer(new int[]{0,0,grid[0][0]});
        int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        while(!pq.isEmpty()){
            int[] arr=pq.poll();
            int r=arr[0],c=arr[1],v=arr[2];
            if(r==grid.length-1&&c==grid[0].length-1) return v;
            
            for(int i=0;i<4;i++){
                int nr=r+dir[i][0],nc=c+dir[i][1];
                if(nr<0||nc<0||nr==grid.length||nc==grid[0].length||grid[nr][nc]==-1) continue;
                
                pq.offer(new int[]{nr,nc,Math.min(grid[nr][nc],v)});
                grid[nr][nc]=-1;
            }
        }
        return -1;
    }
}
