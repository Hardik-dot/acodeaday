class Solution {
    public int[] prevPermOpt1(int[] arr) {
        int i=arr.length-2,j=-1;
        while(i>=0){
            if(arr[i]>arr[i+1]){
                j=i;break;
            }i--;
        }
        if(j==-1) return arr;
        i=arr.length-1;
        while(i>0){
            if(arr[i]<arr[j]&&arr[i]!=arr[i-1]){
                int c=arr[i];
                arr[i]=arr[j];
                arr[j]=c;
                return arr;
            }
            i--;
        }
        return arr;
    }
    
    public int[] prevPermOpt1TM(int[] arr) {
        TreeMap<Integer,Integer> tm = new TreeMap<>();
        for(int i=arr.length-1;i>=0;i--){
            Integer v=tm.lowerKey(arr[i]);
            if(v!=null){
                int ind=tm.get(v);
                int c=arr[i];
                arr[i]=arr[ind];
                arr[ind]=c;
                return arr;
            }
            tm.put(arr[i],i);
        }
        return arr;
    }
}
