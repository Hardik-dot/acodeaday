class Solution {
    public int aux(int[][] matrix,Integer[][] dp,int i,int j,int v) {
        if(i<0||j<0||i==dp.length||j==dp[0].length||matrix[i][j]<=v) return 0;
        if(dp[i][j]==null){
            dp[i][j]=aux(matrix,dp,i-1,j,matrix[i][j]);
            dp[i][j]=Math.max(aux(matrix,dp,i+1,j,matrix[i][j]),dp[i][j]);
            dp[i][j]=Math.max(aux(matrix,dp,i,j+1,matrix[i][j]),dp[i][j]);
            dp[i][j]=Math.max(aux(matrix,dp,i,j-1,matrix[i][j]),dp[i][j])+1;
        }
        return dp[i][j];
    }
    
    public int longestIncreasingPath(int[][] matrix) {
        int r=matrix.length,c=matrix[0].length,res=0;
        Integer[][] dp = new Integer[r][c];
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(dp[i][j]==null){
                    int v=matrix[i][j];
                    dp[i][j]=aux(matrix,dp,i-1,j,v);
                    dp[i][j]=Math.max(aux(matrix,dp,i+1,j,v),dp[i][j]);
                    dp[i][j]=Math.max(aux(matrix,dp,i,j+1,v),dp[i][j]);
                    dp[i][j]=Math.max(aux(matrix,dp,i,j-1,v),dp[i][j])+1;
                    res=Math.max(dp[i][j],res);
                }
            }
        }
        return res;
    }
}
