class Solution {
    private int[] output(List<Integer> ans){
        int[] out = new int[ans.size()];
        for(int i=0;i<ans.size();i++)
            out[i]=ans.get(i);
        return out;
    }
    public int[] findOriginalArray(int[] arr) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        List<Integer> ans = new ArrayList<>();
        
        for(int i:arr){
            pq.add(i);
            hm.put(i,hm.getOrDefault(i,0)+1);
        }
        
        if(hm.containsKey(0)&&hm.get(0)%2==1)
            return new int[0];
        
        while(!pq.isEmpty()){
            int v=pq.poll();
            if(!hm.containsKey(v)) continue;
            if(!hm.containsKey(v*2)) return new int[0];
            
            if(hm.get(v)==1) hm.remove(v);
            else hm.put(v,hm.get(v)-1);
            if(hm.get(v*2)==1) hm.remove(v*2);
            else hm.put(2*v,hm.get(v*2)-1);
            ans.add(v);
        }
        
        return output(ans);
    }
}// 1 2 2 4 4 8
