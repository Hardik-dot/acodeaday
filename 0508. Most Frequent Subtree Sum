/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max=Integer.MIN_VALUE;
    HashMap<Integer,Integer> map = new HashMap<>();
    public int aux(TreeNode root){
        if(root==null) return 0;
        int v=root.val+aux(root.left)+aux(root.right);
        map.put(v,map.getOrDefault(v,0)+1);
        max=Math.max(max,map.get(v));
        return v;
    }
    public int[] findFrequentTreeSum(TreeNode root) {
        aux(root);
        ArrayList<Integer> res = new ArrayList<>();
        for(Map.Entry<Integer,Integer> e:map.entrySet()){
            if(e.getValue()==max)
                res.add(e.getKey());
        }
        
        int[] arr = res.stream().mapToInt(i -> i).toArray();
        
        return arr;
    }
}
