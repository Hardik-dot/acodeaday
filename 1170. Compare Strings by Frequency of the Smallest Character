class Solution {
    public int lex(char[] s){
        int[] count=new int[26];
        for(char c:s)
            count[c-'a']++;
        int i=0;
        while(i<26){
            if(count[i]!=0) return count[i];
            i++;
        }
        return 0;
    }
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        TreeMap<Integer, Integer> tm = new TreeMap<>();
        
        for(int i=0;i<words.length;i++){
            int ct = lex(words[i].toCharArray());
            tm.put(ct,tm.getOrDefault(ct,0)+1);
        }
        
        ArrayList<Integer> al = new ArrayList<>();
        for(Map.Entry<Integer, Integer> e:tm.entrySet()){
            al.add((int)e.getValue());
        }
        for(int i=al.size()-2;i>=0;i--){
            al.set(i,al.get(i)+al.get(i+1));
        }
        Iterator it = tm.keySet().iterator();
        int i=0;
        while(it.hasNext()){
            int key = (int)it.next();
            tm.put(key,al.get(i++));
        }
        int ans[]=new int[queries.length];i=0;
        for(String q:queries){
            int ct = lex(q.toCharArray());
            Integer v = tm.higherKey(ct);
            if(v!=null) ans[i]=tm.get(v);
            i++;
        }
        return ans;
    }
}
