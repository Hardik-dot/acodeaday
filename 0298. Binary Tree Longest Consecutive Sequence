/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int mx=0;
    public void getLongest(TreeNode root, int curr) {
        if(root==null) return;
        mx = Math.max(mx,curr);
        if(root.left!=null){
            if(root.val==root.left.val-1)
                getLongest(root.left,curr+1);
            else
                getLongest(root.left,1);
        }
        
        if(root.right!=null){
            if(root.val==root.right.val-1)
                getLongest(root.right,curr+1);
            else
                getLongest(root.right,1);
        }
    }
    
    public int longestConsecutive(TreeNode root) {
        getLongest(root,1);
        return mx;
    }
}
