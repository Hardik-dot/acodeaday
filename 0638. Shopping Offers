class Solution {
    List<Integer> price;
    List<List<Integer>> special; 
    List<Integer> needs;
    
    private boolean sufficient(List<Integer> goal, int ind){
        for(int i=0;i<needs.size();i++){
            if(goal.get(i)+special.get(ind).get(i)<=needs.get(i)){
                goal.set(i, goal.get(i)+special.get(ind).get(i));
            }else return false;
        }
        return true;
    }
    
    private int aux(int offerInd, List<Integer> goal){
        if(offerInd==special.size()){
            int tot=0;
            for(int i=0;i<needs.size();i++){
                if(goal.get(i)<needs.get(i))
                    tot+=price.get(i)*(needs.get(i)-goal.get(i));
            }
            return tot;
        }
        
        int keep=Integer.MAX_VALUE;
        List<Integer> newGoal = new ArrayList<>(goal);
        if(sufficient(newGoal,offerInd))
            keep=aux(offerInd,newGoal)+special.get(offerInd).get(needs.size());
        int avoid=aux(offerInd+1,goal);
        return Math.min(keep,avoid);
    }
    
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        this.price=price;
        this.special=special;
        this.needs=needs;
        List<Integer> newGoal = new ArrayList<>();
        for(int i=0;i<price.size();i++)
            newGoal.add(0);
        return aux(0,newGoal);
    }
}
