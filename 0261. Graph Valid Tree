class Solution {
    public boolean validTree(int n, int[][] edges) {
        //if(edges.length!=n-1) return false;
        UF uf = new UF(n);
        for(int[] e:edges){
            if(!uf.union(e[0],e[1]))
                return false;
        }
        return uf.getCt()==1;
    }
    
    class UF{
        private int[] parent;
        private int ct;
        UF(int n){
            ct=n;
            parent = new int[n];
            for(int i=0;i<n;i++)
                parent[i]=i;
        }
        
        private int find(int a){
            if(parent[a]==a) return a;
            return parent[a]=find(parent[a]);
        }
        
        protected int getCt(){
            return ct;
        }
        
        protected boolean union(int x, int y){
            int px=find(x),py=find(y);
            if(px==py)
                return false;
            parent[px]=py;
            ct--;
            return true;
        }
        
    }
}
